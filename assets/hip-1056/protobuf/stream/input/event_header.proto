/**
 * # Event Header
 * This header precedes the event messages that contain transactions.
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in
 * [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
 * [RFC8174](https://www.ietf.org/rfc/rfc8174).
 */
syntax = "proto3";

package com.hedera.hapi.block.stream.input;

// SPDX-License-Identifier: Apache-2.0

option java_package = "com.hedera.hapi.block.stream.input.protoc";
// <<<pbj.java_package = "com.hedera.hapi.block.stream.input">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;


import "services/basic_types.proto";
import "platform/event/event_descriptor.proto";
import "services/timestamp.proto";

/**
 * A header for a single event.<br/>
 * This message provides information about an event and its parents within a
 * block.
 * 
 * An `EventHeader` message that contains only `EventDescriptors` for parents
 * can translate into an `EventCore` message directly.<br/>
 * A translated `EventCore` message along with `EventHeader`'s following
 * `EventTransaction` messages in the block can be serialized and hashed to
 * create the `EventDescriptor` for that event.<br/>
 * An `EventHeader` that contains indices to parent events within the containing
 * block will need to have each parent index replaced by the `EventDescriptor`
 * that parent before it can be translated into an EventCore message.
 */
message EventHeader {
    /**
     * A node identifier.
     * <p>
     * This SHALL be the unique identifier for the node that created the event.<br/>
     * This SHALL match the ID of the node as it appears in the address book.
     */
    int64 creator_node_id = 1;

    /**
     * The birth round of the event.<br/>
     * <p>
     * The birth round SHALL be the pending consensus round at the time the
     * event is created.<br/>
     * The pending consensus round SHALL be **one greater** than the latest
     * round to reach consensus.
     */
    int64 birth_round = 2;

    /**
     * An event creation time.<br/>
     * This is the wall clock time at which the event was created,
     * according to the node creating the event.
     * <p>
     * If the event has a self parent, this timestamp MUST be strictly greater
     * than the `time_created` of the self parent.
     */
    proto.Timestamp time_created = 3;

    /**
     * A list of references to parent events. <br/>
     * Each entry can be an `EventDescriptor` or an index to an event
     * within the block. These items represent the parents of this event.
     * <p>
     * This list SHALL include zero or one self parents<br/>
     * This list SHALL include zero or more other parents.<br/>
     * The first element of the list SHALL be the self parent,
     * if one exists.<br/>
     * The list of parents SHALL NOT include more than one parent from the same
     * creator.
     */
    repeated ParentEventReference parents = 4;

    /**
     * The event specification version.<br/>
     * <p>
     * The specification described by this version SHALL encompass the format of
     * the `GossipEvent` message and the format of all contained messages. <br/>
     * This SHALL exactly match the specification version passed into the
     * platform at construction.
     */
    proto.SemanticVersion version = 17; // This field is temporary until birth_round migration is complete. Field number 17 chosen to avoid polluting cheaper 1 byte field numbers 1-16
}

/*
 * A reference to a parent event.
 */
message ParentEventReference {

    oneof parent {
        /**
         * The EventDescriptor of the parent event.
         * <p>
         * The event referenced SHALL NOT be within the containing block.
         */
        proto.EventDescriptor descriptor = 2;

        /**
         * The index of the parent event.
         * <p>
         * The index SHALL be the position of the parent event within the
         * containing block starting from.<br/>
         * The index SHALL be zero-based.
         */
        uint32 index = 1;
    }
}
